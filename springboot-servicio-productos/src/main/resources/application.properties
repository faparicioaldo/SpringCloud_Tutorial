spring.application.name=servicio-productos
server.port=${PORT:0}

eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
#spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.url=jdbc:h2:~/test;DATABASE_TO_UPPER=false
#spring.datasource.url=jdbc:h2:~/test
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=sa
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enable=true
#spring.jpa.defer-datasource-initialization=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true

#eureka.client.service-url.default-zone=http://localhost:8761/eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Resuelve el error de connect timed out 
# Ahora sale otro error de que Load balancer does not have available server for client: SERVICIO-PRODUCTOS
# Pero es por que el eureka esta aun cargando el cambio despues de un rato se arregla 
# o al reiniciar el eureka, pero habra que reiniciar los servicios tambien  
#eureka.client.register-with-eureka= true
#eureka.client.fetch-registry: true
eureka.instance.hostname=localhost
    
